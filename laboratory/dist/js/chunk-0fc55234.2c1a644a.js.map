{"version":3,"sources":["webpack:///./src/page/threejs/material/materialCommon.vue?28ce","webpack:///src/page/threejs/material/materialCommon.vue","webpack:///./src/page/threejs/material/materialCommon.vue?f736","webpack:///./src/page/threejs/material/materialCommon.vue","webpack:///./src/page/threejs/material/materialCommon.vue?f3fa"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","directives","name","rawName","value","expression","arg","ref","staticRenderFns","component"],"mappings":"kJAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,yCAAyC,CAACF,EAAG,MAAM,CAACG,WAAW,CAAC,CAACC,KAAK,SAASC,QAAQ,oBAAoBC,MAAOV,EAAY,SAAEW,WAAW,WAAWC,IAAI,aAAaN,YAAY,wBAAwB,CAACF,EAAG,MAAM,CAACS,IAAI,QAAQP,YAAY,0BAChWQ,EAAkB,G,0DCwBtB,GACE,KAAF,kBACE,KAFF,WAGI,MAAJ,CACM,UAAN,KACM,KAAN,CACQ,SAAR,GAEM,WAAN,CACA,CAAQ,KAAR,IAAQ,MAAR,GACA,CAAQ,KAAR,IAAQ,MAAR,GACA,CAAQ,KAAR,KAAQ,MAAR,MAIE,QAfF,WAeI,IAAJ,OACI,KAAJ,sBACM,EAAN,WAGE,SAAF,GAGE,QAAF,CACI,OADJ,WAEM,KAAN,6BAEI,SAJJ,aAOI,KAPJ,WAOM,IAAN,OAEA,mBAEA,cACQ,EAAR,0BAOM,IAAN,iBAIA,GACA,WACQ,OAAR,mCAEA,WACQ,OAAR,oCAGA,GACA,YAEQ,IAAR,2BACU,MAAV,IACU,KAAV,IAGA,uBACQ,OAAR,GAEA,YAEQ,IAAR,+BACU,MAAV,IACU,SAAV,GACU,QAAV,IAEA,qBAGQ,OADA,EAAR,uBACA,GAEA,YAEQ,IAAR,8BACU,MAAV,MAGA,qBACQ,OAAR,GAEA,YAEQ,IAAR,gCACU,MAAV,QAGA,qBACQ,OAAR,GAEA,YAEQ,IAAR,8BACU,MAAV,SAGU,SAAV,MACU,UAAV,KAGA,qBACQ,OAAR,IAOM,EAAN,yBACQ,EAAR,yBACU,IAAV,MACA,OACU,EAAV,4CACU,EAAV,aAOM,IAAN,2BACM,EAAN,OAMM,IAAN,gCACM,EAAN,0BACM,EAAN,OAEM,IAAN,iCACM,EAAN,OAMM,IAAN,+BACA,gCACA,MACA,MAEA,mDACM,EAAN,0BACM,EAAN,mBAIM,IAAN,yBAEM,EAAN,0BACM,KAAN,sCAEM,KAAN,qBACQ,IAAR,4BACA,6BAGQ,EAAR,aACQ,EAAR,aAMM,KAAN,YAEM,IAAN,yCAEM,EAAN,4CAGE,MAAF,CAII,KAAJ,CACM,QADN,SACA,KACQ,KAAR,QAEM,MAAN,KCnNsX,I,wBCQlXC,EAAY,eACd,EACAhB,EACAe,GACA,EACA,KACA,WACA,MAIa,aAAAC,E,2CCnBf","file":"js/chunk-0fc55234.2c1a644a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"component-material-common flex-layout\"},[_c('div',{directives:[{name:\"resize\",rawName:\"v-resize:throttle\",value:(_vm.onResize),expression:\"onResize\",arg:\"throttle\"}],staticClass:\"three-wrap flex-auto\"},[_c('div',{ref:\"three\",staticClass:\"three full-block\"})])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n<div class=\"component-material-common flex-layout\">\n    <!-- <el-form class=\"flex-none\">\n        <el-form-item label=\"\">\n            <el-radio-group v-model=\"para.o3dIndex\">\n                <el-radio v-for=\"(item,index) in o3dOptions\" :label=\"item.value\" :key=\"index\">\n                    {{item.text}}\n                </el-radio>\n            </el-radio-group>      \n        </el-form-item>\n    </el-form> -->\n    <div class=\"three-wrap flex-auto\" v-resize:throttle=\"onResize\">\n        \n        <div class=\"three full-block\" \n            ref=\"three\"></div>    \n    </div>\n</div>\n</template>\n\n<script>\n/* message */\nimport * as THREE from \"THREE\"\nimport \"three/examples/js/controls/OrbitControls.js\"\nimport * as threeTool from \"@/js/three/threeTool.js\"\n\nexport default {\n    name: \"material-common\",\n    data () {\n        return {\n            renderFun:null,\n            para:{\n                o3dIndex:0,\n            },\n            o3dOptions:[\n                {text:'点',value:0},\n                {text:'线',value:1},\n                {text:'网格',value:2},\n            ],\n        };\n    },\n    mounted(){\n        this.$nextTick(()=>{\n            this.init()\n        })\n    },\n    computed:{\n        // \n    },\n    methods:{\n        render(){\n            this.renderFun && this.renderFun()\n        },\n        onResize(){\n            // this.render()\n        },\n        init(){\n            \n            let el = this.$refs.three\n            // let el = document.querySelector('#material')\n            if(el.firstChild){\n                el.removeChild(el.firstChild)\n            }\n\n\n            /**\n             * 创建场景对象Scene\n             */\n            let scene = new THREE.Scene();\n            /**\n             * 创建网格模型\n             */\n            let getGeometrys = [\n                function(){\n                    return new THREE.BoxGeometry(100, 100, 100);\n                },\n                function(){\n                    return new THREE.SphereGeometry(50, 25, 25);\n                },\n            ]\n            let getO3ds=[\n                function(geometry){\n                    // 创建一个点材质对象\n                    let material = new THREE.PointsMaterial({\n                        color: 0x0000ff, //颜色\n                        size: 3, //点渲染尺寸\n                    });\n                    //点模型对象  参数：几何体  点材质\n                    let point = new THREE.Points(geometry, material);\n                    return point\n                },\n                function(geometry){\n                    // 虚线材质对象：产生虚线效果\n                    let material = new THREE.LineDashedMaterial({\n                        color: 0x0000ff,\n                        dashSize: 10,//显示线段的大小。默认为3。\n                        gapSize: 5,//间隙的大小。默认为1\n                    });\n                    let line = new THREE.Line(geometry, material); //线模型对象\n                    //  computeLineDistances方法  计算LineDashedMaterial所需的距离数组\n                    line.computeLineDistances();//计算虚线\n                    return line\n                },\n                function(geometry){\n                    //基础网格材质对象   不受光照影响  没有棱角感\n                    let material = new THREE.MeshBasicMaterial({\n                        color: 0x0000ff,\n                    })\n                    //  网格模型对象 参数：几何体  网格Mesh材质\n                    let mesh = new THREE.Mesh(geometry, material);\n                    return mesh\n                },\n                function(geometry){\n                    // 与光照计算  漫反射   产生棱角感  粗糙不光亮暗淡的材质表面\n                    let material = new THREE.MeshLambertMaterial({\n                        color: 0x00ff00,\n                    });\n                    //  网格模型对象 参数：几何体  网格Mesh材质\n                    let mesh = new THREE.Mesh(geometry, material);\n                    return mesh\n                },\n                function(geometry){\n                    // 与光照计算  高光效果（镜面反射）  高亮的材质表面\n                    let material = new THREE.MeshPhongMaterial({\n                        color: 0xff0000,\n                        // specular:0x444444,//高光部分的颜色\n                        // shininess:20,//高光部分的亮度，默认30\n                        specular:0x006000,//高光部分的颜色\n                        shininess:20,//高光部分的亮度，默认30\n                    });\n                    //  网格模型对象 参数：几何体  网格Mesh材质\n                    let mesh = new THREE.Mesh(geometry, material);\n                    return mesh\n                },\n            ]\n\n            let setO3dGep = function(o3d, [x,y], [xc,yc], [xgap,ygap]) {\n                o3d.position.set((x-(xc-1)/2)*xgap ,0 ,(y-(yc-1)/2)*ygap)\n            }\n            getGeometrys.forEach((gv,gi,ga)=>{\n                getO3ds.forEach((ov,oi,oa)=>{\n                    let geometry = gv()\n                    let o3d = ov(geometry)\n                    threeTool.setO3dGep(o3d, [gi,oi], [ga.length,oa.length], [150,120])\n                    scene.add(o3d)\n                })\n            })\n\n\n\n            // 辅助坐标系\n            let axisHelper = new THREE.AxisHelper(250);\n            scene.add(axisHelper);\n\n            /**\n             * 光源设置\n             */\n            //点光源\n            let point = new THREE.PointLight(0xffffff);\n            point.position.set(400, 200, 300); //点光源位置\n            scene.add(point); //点光源添加到场景中\n            //环境光 // 各向均匀的 环境光颜色与网格模型的颜色进行RGB进行乘法运算\n            let ambient = new THREE.AmbientLight(0x808080);\n            scene.add(ambient);\n            // console.log(scene)\n            // console.log(scene.children)\n            /**\n             * 相机设置\n             */\n            let width = this.$refs.three.clientWidth; //窗口宽度\n            let height = this.$refs.three.clientHeight; //窗口高度\n            let k = width / height; //窗口宽高比\n            let s = 200; //三维场景显示范围控制系数，系数越大，显示的范围越大\n            //创建相机对象\n            let camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);\n            camera.position.set(200, 300, 200); //设置相机位置\n            camera.lookAt(scene.position); //设置相机方向(指向的场景对象)\n            /**\n             * 创建渲染器对象\n             */\n            let renderer = new THREE.WebGLRenderer();\n            // renderer.setSize(width, height);//设置渲染区域尺寸\n            renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色\n            this.$refs.three.appendChild(renderer.domElement); //body元素中插入canvas对象\n            //执行渲染操作   指定场景、相机作为参数\n            this.renderFun = ()=>{\n                let width = this.$refs.three.clientWidth; //窗口宽度\n                let height = this.$refs.three.clientHeight; //窗口高度\n                //set camera\n\n                renderer.setSize(width, height);//设置渲染区域尺寸\n                renderer.render(scene, camera);\n                \n            }\n\n            \n            // 渲染函数\n            this.renderFun()\n            //创建控件对象  相机对象camera作为参数   控件可以监听鼠标的变化，改变相机对象的属性\n            let controls = new THREE.OrbitControls(camera,renderer.domElement);\n            //监听鼠标事件，触发渲染函数，更新canvas画布渲染效果\n            controls.addEventListener('change', this.renderFun);//移动相机\n        },\n    },\n    watch:{\n        // getMesh(after,before){\n        //     this.init()\n        // },\n        para:{\n            handler(after,before){\n                this.init()\n            },\n            deep:true,\n            // immediate:true,\n        }\n    },\n}\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n.component-material-common{\n    \n}\n</style>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./materialCommon.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./materialCommon.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./materialCommon.vue?vue&type=template&id=ebcd521c&scoped=true&\"\nimport script from \"./materialCommon.vue?vue&type=script&lang=js&\"\nexport * from \"./materialCommon.vue?vue&type=script&lang=js&\"\nimport style0 from \"./materialCommon.vue?vue&type=style&index=0&id=ebcd521c&rel=stylesheet%2Fscss&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ebcd521c\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./materialCommon.vue?vue&type=style&index=0&id=ebcd521c&rel=stylesheet%2Fscss&lang=scss&scoped=true&\""],"sourceRoot":""}